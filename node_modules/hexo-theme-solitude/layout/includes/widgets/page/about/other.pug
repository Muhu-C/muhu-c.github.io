- var tj = site.data.about.tj
- var oneself = site.data.about.oneself

if tj || oneself
    .author-content
        if tj
            .about-statistic.author-content-item(style=`background: url(${tj.img});`)
                .card-content
                    .author-content-item-tips=_p('about.other.tj.tip')
                    span.author-content-item-title=_p('about.other.tj.title')
                    #statistic
                    .post-tips!= _p(tj.desc)
                    if tj.button
                        .banner-button-group
                            a.banner-button(href=url_for(tj.button_link))
                                i.solitude.fas.fa-circle-chevron-right
                                span.banner-button-text= tj.button_text

                case tj.provider
                    when '51la'
                        script.
                            fetch("#{tj.url}")
                                .then(res => res.text())
                                .then(data => {
                                    const title = ["最近活跃", "今日人数", "今日访问", "昨日人数", "昨日访问", "本月访问", "总访问量"];
                                    let num = data.match(/(<\/span><span>).*?(\/span><\/p>)/g);
                                    num = num.map(el => {
                                        let val = el.replace(/(<\/span><span>)/g, "");
                                        return val.replace(/(<\/span><\/p>)/g, "");
                                    });
                                    const s = document.getElementById("statistic");
                                    let html = '';
                                    for (let i = 0; i < num.length; i++) {
                                        if (i === 0 || i === num.length - 1) continue;
                                        html += `<div><span>${title[i]}</span><span id="${title[i]}">${num[i]}</span></div>`;
                                    }
                                    s.innerHTML = html;
                                });
                    when 'custom'
                        script.
                            // Umami 配置
                            const umamiConfig = {
                                url: '#{theme.umami.url || ""}',
                                websiteId: '#{theme.umami.website_id || ""}',
                                authToken: '#{theme.umami.auth_token || ""}'
                            };

                            // 时间戳计算函数
                            function getTimestamp(date) {
                                return date.getTime();
                            }

                            // 格式化URL
                            function formatUmamiUrl(url) {
                                return url.endsWith('/') ? url : url + '/';
                            }

                            (function() {
                                'use strict';
                                
                                let umamiInitialized = false;
                                
                                // 获取Umami数据
                                async function fetchUmamiData() {
                                    try {
                                        const baseUrl = formatUmamiUrl(umamiConfig.url);
                                        
                                        // 检查配置是否完整
                                        if (!umamiConfig.url || !umamiConfig.websiteId || !umamiConfig.authToken) {
                                            throw new Error('错误: Umami 配置不完整，请检查 _config.yml 中的 umami 设置。');
                                        }

                                        // 计算各个时间段
                                        const now = new Date();
                                        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());

                                        // 昨日时间范围
                                        const yesterdayStart = new Date(todayStart);
                                        yesterdayStart.setDate(yesterdayStart.getDate() - 1);
                                        const yesterdayEnd = new Date(todayStart);
                                        yesterdayEnd.setMilliseconds(yesterdayEnd.getMilliseconds() - 1);

                                        // 30 天内时间范围
                                        const thirtyDaysAgo = new Date(now);
                                        thirtyDaysAgo.setDate(now.getDate() - 30);

                                        // 今年时间范围
                                        const yearlyStart = new Date(now.getFullYear(), 0, 1);

                                        // 自建站以来的时间范围
                                        const totalStart = new Date(2024, 5, 2);

                                        // 获取所有数据
                                        const [todayRes, yesterdayRes, thirtyDaysRes, yearlyRes, totalRes] = await Promise.all([
                                            // 今日数据
                                            fetch(`${baseUrl}api/websites/${umamiConfig.websiteId}/stats?` + new URLSearchParams({
                                                startAt: getTimestamp(todayStart),
                                                endAt: getTimestamp(now)
                                            }), { 
                                                headers: { 'Authorization': `Bearer ${umamiConfig.authToken}` },
                                                timeout: 10000 
                                            }).then(res => res.json()),
                                            
                                            // 昨日数据
                                            fetch(`${baseUrl}api/websites/${umamiConfig.websiteId}/stats?` + new URLSearchParams({
                                                startAt: getTimestamp(yesterdayStart),
                                                endAt: getTimestamp(yesterdayEnd)
                                            }), { 
                                                headers: { 'Authorization': `Bearer ${umamiConfig.authToken}` },
                                                timeout: 10000 
                                            }).then(res => res.json()),
                                            
                                            // 30天内数据
                                            fetch(`${baseUrl}api/websites/${umamiConfig.websiteId}/stats?` + new URLSearchParams({
                                                startAt: getTimestamp(thirtyDaysAgo),
                                                endAt: getTimestamp(now)
                                            }), { 
                                                headers: { 'Authorization': `Bearer ${umamiConfig.authToken}` },
                                                timeout: 10000 
                                            }).then(res => res.json()),
                                            
                                            // 今年数据
                                            fetch(`${baseUrl}api/websites/${umamiConfig.websiteId}/stats?` + new URLSearchParams({
                                                startAt: getTimestamp(yearlyStart),
                                                endAt: getTimestamp(now)
                                            }), { 
                                                headers: { 'Authorization': `Bearer ${umamiConfig.authToken}` },
                                                timeout: 10000 
                                            }).then(res => res.json()),

                                            // 全部数据
                                            fetch(`${baseUrl}api/websites/${umamiConfig.websiteId}/stats?` + new URLSearchParams({
                                                startAt: getTimestamp(totalStart),
                                                endAt: getTimestamp(now)
                                            }), { 
                                                headers: { 'Authorization': `Bearer ${umamiConfig.authToken}` },
                                                timeout: 10000 
                                            }).then(res => res.json())
                                        ]);

                                        // 处理数据
                                        const statsData = {
                                            today_uv: todayRes.visitors?.value || 0,
                                            today_pv: todayRes.pageviews?.value || 0,
                                            yesterday_uv: yesterdayRes.visitors?.value || 0,
                                            thirty_days_pv: thirtyDaysRes.pageviews?.value || 0,
                                            yearly_pv: yearlyRes.pageviews?.value || 0,
                                            total_pv: totalRes.pageviews?.value || 0
                                        };

                                        updateStatistics(statsData);
                                        
                                    } catch (error) {
                                        console.error('获取Umami数据失败: ', error);
                                        showError(error.message);
                                    }
                                }

                                // 更新统计显示
                                function updateStatistics(data) {
                                    const title = {
                                        "today_uv": "今日人数", 
                                        "today_pv": "今日访问", 
                                        "yesterday_uv": "昨日人数", 
                                        "thirty_days_pv": "30 天访问", 
                                        "yearly_pv": "今年访问", 
                                        "total_pv": "总访问数"
                                    };

                                    const s = document.getElementById("statistic");
                                    let html = '';

                                    for (let key in data) {
                                        if (data.hasOwnProperty(key) && title[key]) {
                                            html += `<div><span>${title[key]}</span><span id="${key}">${data[key]}</span></div>`;
                                        }
                                    }

                                    s.innerHTML = html;
                                }

                                // 显示错误信息
                                function showError(message) {
                                    const s = document.getElementById("statistic");
                                    s.innerHTML = '<div class="statistic-error">统计信息暂时不可用<br><small>请检查网络连接或查看控制台</small><small>若出现问题请联系博主</small></div>';
                                }

                                function showLoading() {
                                    const s = document.getElementById("statistic");
                                    if (s) {
                                        s.innerHTML = '<div class="statistic-loading">统计信息正在加载中<br><small>请稍后...</small></div>';
                                    }
                                }

                                function initUmamiStats() {
                                    if (umamiInitialized) return;
                                    
                                    const statisticElement = document.getElementById('statistic');
                                    if (!statisticElement) {
                                        console.log('统计元素未找到，等待重试...');
                                        setTimeout(initUmamiStats, 100);
                                        return;
                                    }
                                    
                                    umamiInitialized = true;
                                    console.log('Solitude 主题下初始化 Umami 统计');
                                    
                                    showLoading();
                                    fetchUmamiData();
                                }

                                if (typeof window.refreshFn !== 'undefined') {
                                    const originalRefreshFn = window.refreshFn;
                                    window.refreshFn = function() {
                                        if (typeof originalRefreshFn === 'function') {
                                            originalRefreshFn();
                                        }
                                        setTimeout(initUmamiStats, 300);
                                    };
                                }

                                document.addEventListener('DOMContentLoaded', function() {
                                    setTimeout(initUmamiStats, 500);
                                });

                                window.addEventListener('load', function() {
                                    if (!umamiInitialized) {
                                        initUmamiStats();
                                    }
                                });
                            })();
                           
        if oneself
            style.
                :root {
                    --site-about-oneself-map--light: url(#{oneself.map.light});
                    --site-about-oneself-map--dark: url(#{oneself.map.dark});
                }
            .author-content-item-group.column.mapAndInfo
                .author-content-item.map.single
                    span.map-title=_p('about.other.oneself.map_title') + oneself.location
                .author-content-item.selfInfo.single
                    div
                        span.selfInfo-title=_p('about.other.oneself.info_title1')
                        span.selfInfo-content(style="color: #43a6c6;")= oneself.birthYear
                    div
                        span.selfInfo-title= oneself.university
                        span.selfInfo-content(style="color: #c69043;")= oneself.major
                    div
                        span.selfInfo-title=_p('about.other.oneself.info_title2')
                        span.selfInfo-content(style="color: #597;")= oneself.occupation